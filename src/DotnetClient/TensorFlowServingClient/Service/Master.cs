// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tensorflow/core/protobuf/master.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Tensorflow {

  /// <summary>Holder for reflection information generated from tensorflow/core/protobuf/master.proto</summary>
  public static partial class MasterReflection {

    #region Descriptor
    /// <summary>File descriptor for tensorflow/core/protobuf/master.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static MasterReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CiV0ZW5zb3JmbG93L2NvcmUvcHJvdG9idWYvbWFzdGVyLnByb3RvEgp0ZW5z",
            "b3JmbG93GjF0ZW5zb3JmbG93L2NvcmUvZnJhbWV3b3JrL2RldmljZV9hdHRy",
            "aWJ1dGVzLnByb3RvGiV0ZW5zb3JmbG93L2NvcmUvZnJhbWV3b3JrL2dyYXBo",
            "LnByb3RvGiV0ZW5zb3JmbG93L2NvcmUvcHJvdG9idWYvY29uZmlnLnByb3Rv",
            "Git0ZW5zb3JmbG93L2NvcmUvcHJvdG9idWYvbmFtZWRfdGVuc29yLnByb3Rv",
            "IngKFENyZWF0ZVNlc3Npb25SZXF1ZXN0EicKCWdyYXBoX2RlZhgBIAEoCzIU",
            "LnRlbnNvcmZsb3cuR3JhcGhEZWYSJwoGY29uZmlnGAIgASgLMhcudGVuc29y",
            "Zmxvdy5Db25maWdQcm90bxIOCgZ0YXJnZXQYAyABKAkiRgoVQ3JlYXRlU2Vz",
            "c2lvblJlc3BvbnNlEhYKDnNlc3Npb25faGFuZGxlGAEgASgJEhUKDWdyYXBo",
            "X3ZlcnNpb24YAiABKAMidgoURXh0ZW5kU2Vzc2lvblJlcXVlc3QSFgoOc2Vz",
            "c2lvbl9oYW5kbGUYASABKAkSJwoJZ3JhcGhfZGVmGAIgASgLMhQudGVuc29y",
            "Zmxvdy5HcmFwaERlZhIdChVjdXJyZW50X2dyYXBoX3ZlcnNpb24YAyABKAMi",
            "MgoVRXh0ZW5kU2Vzc2lvblJlc3BvbnNlEhkKEW5ld19ncmFwaF92ZXJzaW9u",
            "GAQgASgDIrgBCg5SdW5TdGVwUmVxdWVzdBIWCg5zZXNzaW9uX2hhbmRsZRgB",
            "IAEoCRIqCgRmZWVkGAIgAygLMhwudGVuc29yZmxvdy5OYW1lZFRlbnNvclBy",
            "b3RvEg0KBWZldGNoGAMgAygJEg4KBnRhcmdldBgEIAMoCRInCgdvcHRpb25z",
            "GAUgASgLMhYudGVuc29yZmxvdy5SdW5PcHRpb25zEhoKEnBhcnRpYWxfcnVu",
            "X2hhbmRsZRgGIAEoCSJqCg9SdW5TdGVwUmVzcG9uc2USLAoGdGVuc29yGAEg",
            "AygLMhwudGVuc29yZmxvdy5OYW1lZFRlbnNvclByb3RvEikKCG1ldGFkYXRh",
            "GAIgASgLMhcudGVuc29yZmxvdy5SdW5NZXRhZGF0YSJdChZQYXJ0aWFsUnVu",
            "U2V0dXBSZXF1ZXN0EhYKDnNlc3Npb25faGFuZGxlGAEgASgJEgwKBGZlZWQY",
            "AiADKAkSDQoFZmV0Y2gYAyADKAkSDgoGdGFyZ2V0GAQgAygJIjUKF1BhcnRp",
            "YWxSdW5TZXR1cFJlc3BvbnNlEhoKEnBhcnRpYWxfcnVuX2hhbmRsZRgBIAEo",
            "CSItChNDbG9zZVNlc3Npb25SZXF1ZXN0EhYKDnNlc3Npb25faGFuZGxlGAEg",
            "ASgJIhYKFENsb3NlU2Vzc2lvblJlc3BvbnNlIjkKDFJlc2V0UmVxdWVzdBIR",
            "Cgljb250YWluZXIYASADKAkSFgoOZGV2aWNlX2ZpbHRlcnMYAiADKAkiDwoN",
            "UmVzZXRSZXNwb25zZSIsChJMaXN0RGV2aWNlc1JlcXVlc3QSFgoOc2Vzc2lv",
            "bl9oYW5kbGUYASABKAkifgoTTGlzdERldmljZXNSZXNwb25zZRIyCgxsb2Nh",
            "bF9kZXZpY2UYASADKAsyHC50ZW5zb3JmbG93LkRldmljZUF0dHJpYnV0ZXMS",
            "MwoNcmVtb3RlX2RldmljZRgCIAMoCzIcLnRlbnNvcmZsb3cuRGV2aWNlQXR0",
            "cmlidXRlc0I7ChpvcmcudGVuc29yZmxvdy5kaXN0cnVudGltZUIYRGlzdHJp",
            "YnV0ZWRSdW50aW1lUHJvdG9zUAH4AQFiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Tensorflow.DeviceAttributesReflection.Descriptor, global::Tensorflow.GraphReflection.Descriptor, global::Tensorflow.ConfigReflection.Descriptor, global::Tensorflow.NamedTensorReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Tensorflow.CreateSessionRequest), global::Tensorflow.CreateSessionRequest.Parser, new[]{ "GraphDef", "Config", "Target" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tensorflow.CreateSessionResponse), global::Tensorflow.CreateSessionResponse.Parser, new[]{ "SessionHandle", "GraphVersion" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tensorflow.ExtendSessionRequest), global::Tensorflow.ExtendSessionRequest.Parser, new[]{ "SessionHandle", "GraphDef", "CurrentGraphVersion" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tensorflow.ExtendSessionResponse), global::Tensorflow.ExtendSessionResponse.Parser, new[]{ "NewGraphVersion" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tensorflow.RunStepRequest), global::Tensorflow.RunStepRequest.Parser, new[]{ "SessionHandle", "Feed", "Fetch", "Target", "Options", "PartialRunHandle" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tensorflow.RunStepResponse), global::Tensorflow.RunStepResponse.Parser, new[]{ "Tensor", "Metadata" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tensorflow.PartialRunSetupRequest), global::Tensorflow.PartialRunSetupRequest.Parser, new[]{ "SessionHandle", "Feed", "Fetch", "Target" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tensorflow.PartialRunSetupResponse), global::Tensorflow.PartialRunSetupResponse.Parser, new[]{ "PartialRunHandle" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tensorflow.CloseSessionRequest), global::Tensorflow.CloseSessionRequest.Parser, new[]{ "SessionHandle" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tensorflow.CloseSessionResponse), global::Tensorflow.CloseSessionResponse.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tensorflow.ResetRequest), global::Tensorflow.ResetRequest.Parser, new[]{ "Container", "DeviceFilters" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tensorflow.ResetResponse), global::Tensorflow.ResetResponse.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tensorflow.ListDevicesRequest), global::Tensorflow.ListDevicesRequest.Parser, new[]{ "SessionHandle" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tensorflow.ListDevicesResponse), global::Tensorflow.ListDevicesResponse.Parser, new[]{ "LocalDevice", "RemoteDevice" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class CreateSessionRequest : pb::IMessage<CreateSessionRequest> {
    private static readonly pb::MessageParser<CreateSessionRequest> _parser = new pb::MessageParser<CreateSessionRequest>(() => new CreateSessionRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CreateSessionRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tensorflow.MasterReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateSessionRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateSessionRequest(CreateSessionRequest other) : this() {
      GraphDef = other.graphDef_ != null ? other.GraphDef.Clone() : null;
      Config = other.config_ != null ? other.Config.Clone() : null;
      target_ = other.target_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateSessionRequest Clone() {
      return new CreateSessionRequest(this);
    }

    /// <summary>Field number for the "graph_def" field.</summary>
    public const int GraphDefFieldNumber = 1;
    private global::Tensorflow.GraphDef graphDef_;
    /// <summary>
    /// The initial graph definition.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Tensorflow.GraphDef GraphDef {
      get { return graphDef_; }
      set {
        graphDef_ = value;
      }
    }

    /// <summary>Field number for the "config" field.</summary>
    public const int ConfigFieldNumber = 2;
    private global::Tensorflow.ConfigProto config_;
    /// <summary>
    /// Configuration options.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Tensorflow.ConfigProto Config {
      get { return config_; }
      set {
        config_ = value;
      }
    }

    /// <summary>Field number for the "target" field.</summary>
    public const int TargetFieldNumber = 3;
    private string target_ = "";
    /// <summary>
    /// The target string used from the client's perspective.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Target {
      get { return target_; }
      set {
        target_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CreateSessionRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CreateSessionRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(GraphDef, other.GraphDef)) return false;
      if (!object.Equals(Config, other.Config)) return false;
      if (Target != other.Target) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (graphDef_ != null) hash ^= GraphDef.GetHashCode();
      if (config_ != null) hash ^= Config.GetHashCode();
      if (Target.Length != 0) hash ^= Target.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (graphDef_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(GraphDef);
      }
      if (config_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Config);
      }
      if (Target.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Target);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (graphDef_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(GraphDef);
      }
      if (config_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Config);
      }
      if (Target.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Target);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CreateSessionRequest other) {
      if (other == null) {
        return;
      }
      if (other.graphDef_ != null) {
        if (graphDef_ == null) {
          graphDef_ = new global::Tensorflow.GraphDef();
        }
        GraphDef.MergeFrom(other.GraphDef);
      }
      if (other.config_ != null) {
        if (config_ == null) {
          config_ = new global::Tensorflow.ConfigProto();
        }
        Config.MergeFrom(other.Config);
      }
      if (other.Target.Length != 0) {
        Target = other.Target;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (graphDef_ == null) {
              graphDef_ = new global::Tensorflow.GraphDef();
            }
            input.ReadMessage(graphDef_);
            break;
          }
          case 18: {
            if (config_ == null) {
              config_ = new global::Tensorflow.ConfigProto();
            }
            input.ReadMessage(config_);
            break;
          }
          case 26: {
            Target = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CreateSessionResponse : pb::IMessage<CreateSessionResponse> {
    private static readonly pb::MessageParser<CreateSessionResponse> _parser = new pb::MessageParser<CreateSessionResponse>(() => new CreateSessionResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CreateSessionResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tensorflow.MasterReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateSessionResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateSessionResponse(CreateSessionResponse other) : this() {
      sessionHandle_ = other.sessionHandle_;
      graphVersion_ = other.graphVersion_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateSessionResponse Clone() {
      return new CreateSessionResponse(this);
    }

    /// <summary>Field number for the "session_handle" field.</summary>
    public const int SessionHandleFieldNumber = 1;
    private string sessionHandle_ = "";
    /// <summary>
    /// The session handle to be used in subsequent calls for the created session.
    ///
    /// The client must arrange to call CloseSession with this returned
    /// session handle to close the session.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SessionHandle {
      get { return sessionHandle_; }
      set {
        sessionHandle_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "graph_version" field.</summary>
    public const int GraphVersionFieldNumber = 2;
    private long graphVersion_;
    /// <summary>
    /// The initial version number for the graph, to be used in the next call
    /// to ExtendSession.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long GraphVersion {
      get { return graphVersion_; }
      set {
        graphVersion_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CreateSessionResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CreateSessionResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SessionHandle != other.SessionHandle) return false;
      if (GraphVersion != other.GraphVersion) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SessionHandle.Length != 0) hash ^= SessionHandle.GetHashCode();
      if (GraphVersion != 0L) hash ^= GraphVersion.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SessionHandle.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(SessionHandle);
      }
      if (GraphVersion != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(GraphVersion);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SessionHandle.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SessionHandle);
      }
      if (GraphVersion != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(GraphVersion);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CreateSessionResponse other) {
      if (other == null) {
        return;
      }
      if (other.SessionHandle.Length != 0) {
        SessionHandle = other.SessionHandle;
      }
      if (other.GraphVersion != 0L) {
        GraphVersion = other.GraphVersion;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            SessionHandle = input.ReadString();
            break;
          }
          case 16: {
            GraphVersion = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ExtendSessionRequest : pb::IMessage<ExtendSessionRequest> {
    private static readonly pb::MessageParser<ExtendSessionRequest> _parser = new pb::MessageParser<ExtendSessionRequest>(() => new ExtendSessionRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ExtendSessionRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tensorflow.MasterReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ExtendSessionRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ExtendSessionRequest(ExtendSessionRequest other) : this() {
      sessionHandle_ = other.sessionHandle_;
      GraphDef = other.graphDef_ != null ? other.GraphDef.Clone() : null;
      currentGraphVersion_ = other.currentGraphVersion_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ExtendSessionRequest Clone() {
      return new ExtendSessionRequest(this);
    }

    /// <summary>Field number for the "session_handle" field.</summary>
    public const int SessionHandleFieldNumber = 1;
    private string sessionHandle_ = "";
    /// <summary>
    /// REQUIRED: session_handle must be returned by a CreateSession call
    /// to the same master service.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SessionHandle {
      get { return sessionHandle_; }
      set {
        sessionHandle_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "graph_def" field.</summary>
    public const int GraphDefFieldNumber = 2;
    private global::Tensorflow.GraphDef graphDef_;
    /// <summary>
    /// REQUIRED: The nodes to be added to the session's graph. If any node has
    /// the same name as an existing node, the operation will fail with
    /// ILLEGAL_ARGUMENT.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Tensorflow.GraphDef GraphDef {
      get { return graphDef_; }
      set {
        graphDef_ = value;
      }
    }

    /// <summary>Field number for the "current_graph_version" field.</summary>
    public const int CurrentGraphVersionFieldNumber = 3;
    private long currentGraphVersion_;
    /// <summary>
    /// REQUIRED: The version number of the graph to be extended. This will be
    /// tested against the current server-side version number, and the operation
    /// will fail with FAILED_PRECONDITION if they do not match.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long CurrentGraphVersion {
      get { return currentGraphVersion_; }
      set {
        currentGraphVersion_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ExtendSessionRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ExtendSessionRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SessionHandle != other.SessionHandle) return false;
      if (!object.Equals(GraphDef, other.GraphDef)) return false;
      if (CurrentGraphVersion != other.CurrentGraphVersion) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SessionHandle.Length != 0) hash ^= SessionHandle.GetHashCode();
      if (graphDef_ != null) hash ^= GraphDef.GetHashCode();
      if (CurrentGraphVersion != 0L) hash ^= CurrentGraphVersion.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SessionHandle.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(SessionHandle);
      }
      if (graphDef_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(GraphDef);
      }
      if (CurrentGraphVersion != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(CurrentGraphVersion);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SessionHandle.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SessionHandle);
      }
      if (graphDef_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(GraphDef);
      }
      if (CurrentGraphVersion != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(CurrentGraphVersion);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ExtendSessionRequest other) {
      if (other == null) {
        return;
      }
      if (other.SessionHandle.Length != 0) {
        SessionHandle = other.SessionHandle;
      }
      if (other.graphDef_ != null) {
        if (graphDef_ == null) {
          graphDef_ = new global::Tensorflow.GraphDef();
        }
        GraphDef.MergeFrom(other.GraphDef);
      }
      if (other.CurrentGraphVersion != 0L) {
        CurrentGraphVersion = other.CurrentGraphVersion;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            SessionHandle = input.ReadString();
            break;
          }
          case 18: {
            if (graphDef_ == null) {
              graphDef_ = new global::Tensorflow.GraphDef();
            }
            input.ReadMessage(graphDef_);
            break;
          }
          case 24: {
            CurrentGraphVersion = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// TODO(mrry): Return something about the operation?
  /// </summary>
  public sealed partial class ExtendSessionResponse : pb::IMessage<ExtendSessionResponse> {
    private static readonly pb::MessageParser<ExtendSessionResponse> _parser = new pb::MessageParser<ExtendSessionResponse>(() => new ExtendSessionResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ExtendSessionResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tensorflow.MasterReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ExtendSessionResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ExtendSessionResponse(ExtendSessionResponse other) : this() {
      newGraphVersion_ = other.newGraphVersion_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ExtendSessionResponse Clone() {
      return new ExtendSessionResponse(this);
    }

    /// <summary>Field number for the "new_graph_version" field.</summary>
    public const int NewGraphVersionFieldNumber = 4;
    private long newGraphVersion_;
    /// <summary>
    /// The new version number for the extended graph, to be used in the next call
    /// to ExtendSession.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long NewGraphVersion {
      get { return newGraphVersion_; }
      set {
        newGraphVersion_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ExtendSessionResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ExtendSessionResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (NewGraphVersion != other.NewGraphVersion) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (NewGraphVersion != 0L) hash ^= NewGraphVersion.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (NewGraphVersion != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(NewGraphVersion);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (NewGraphVersion != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(NewGraphVersion);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ExtendSessionResponse other) {
      if (other == null) {
        return;
      }
      if (other.NewGraphVersion != 0L) {
        NewGraphVersion = other.NewGraphVersion;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 32: {
            NewGraphVersion = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class RunStepRequest : pb::IMessage<RunStepRequest> {
    private static readonly pb::MessageParser<RunStepRequest> _parser = new pb::MessageParser<RunStepRequest>(() => new RunStepRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RunStepRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tensorflow.MasterReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RunStepRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RunStepRequest(RunStepRequest other) : this() {
      sessionHandle_ = other.sessionHandle_;
      feed_ = other.feed_.Clone();
      fetch_ = other.fetch_.Clone();
      target_ = other.target_.Clone();
      Options = other.options_ != null ? other.Options.Clone() : null;
      partialRunHandle_ = other.partialRunHandle_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RunStepRequest Clone() {
      return new RunStepRequest(this);
    }

    /// <summary>Field number for the "session_handle" field.</summary>
    public const int SessionHandleFieldNumber = 1;
    private string sessionHandle_ = "";
    /// <summary>
    /// REQUIRED: session_handle must be returned by a CreateSession call
    /// to the same master service.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SessionHandle {
      get { return sessionHandle_; }
      set {
        sessionHandle_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "feed" field.</summary>
    public const int FeedFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Tensorflow.NamedTensorProto> _repeated_feed_codec
        = pb::FieldCodec.ForMessage(18, global::Tensorflow.NamedTensorProto.Parser);
    private readonly pbc::RepeatedField<global::Tensorflow.NamedTensorProto> feed_ = new pbc::RepeatedField<global::Tensorflow.NamedTensorProto>();
    /// <summary>
    /// Tensors to be fed in the step. Each feed is a named tensor.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Tensorflow.NamedTensorProto> Feed {
      get { return feed_; }
    }

    /// <summary>Field number for the "fetch" field.</summary>
    public const int FetchFieldNumber = 3;
    private static readonly pb::FieldCodec<string> _repeated_fetch_codec
        = pb::FieldCodec.ForString(26);
    private readonly pbc::RepeatedField<string> fetch_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// Fetches. A list of tensor names. The caller expects a tensor to
    /// be returned for each fetch[i] (see RunStepResponse.tensor). The
    /// order of specified fetches does not change the execution order.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Fetch {
      get { return fetch_; }
    }

    /// <summary>Field number for the "target" field.</summary>
    public const int TargetFieldNumber = 4;
    private static readonly pb::FieldCodec<string> _repeated_target_codec
        = pb::FieldCodec.ForString(34);
    private readonly pbc::RepeatedField<string> target_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// Target Nodes. A list of node names. The named nodes will be run
    /// to but their outputs will not be fetched.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Target {
      get { return target_; }
    }

    /// <summary>Field number for the "options" field.</summary>
    public const int OptionsFieldNumber = 5;
    private global::Tensorflow.RunOptions options_;
    /// <summary>
    /// Options for the run call.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Tensorflow.RunOptions Options {
      get { return options_; }
      set {
        options_ = value;
      }
    }

    /// <summary>Field number for the "partial_run_handle" field.</summary>
    public const int PartialRunHandleFieldNumber = 6;
    private string partialRunHandle_ = "";
    /// <summary>
    /// Partial run handle (optional). If specified, this will be a partial run
    /// execution, run up to the specified fetches.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PartialRunHandle {
      get { return partialRunHandle_; }
      set {
        partialRunHandle_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RunStepRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RunStepRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SessionHandle != other.SessionHandle) return false;
      if(!feed_.Equals(other.feed_)) return false;
      if(!fetch_.Equals(other.fetch_)) return false;
      if(!target_.Equals(other.target_)) return false;
      if (!object.Equals(Options, other.Options)) return false;
      if (PartialRunHandle != other.PartialRunHandle) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SessionHandle.Length != 0) hash ^= SessionHandle.GetHashCode();
      hash ^= feed_.GetHashCode();
      hash ^= fetch_.GetHashCode();
      hash ^= target_.GetHashCode();
      if (options_ != null) hash ^= Options.GetHashCode();
      if (PartialRunHandle.Length != 0) hash ^= PartialRunHandle.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SessionHandle.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(SessionHandle);
      }
      feed_.WriteTo(output, _repeated_feed_codec);
      fetch_.WriteTo(output, _repeated_fetch_codec);
      target_.WriteTo(output, _repeated_target_codec);
      if (options_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(Options);
      }
      if (PartialRunHandle.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(PartialRunHandle);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SessionHandle.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SessionHandle);
      }
      size += feed_.CalculateSize(_repeated_feed_codec);
      size += fetch_.CalculateSize(_repeated_fetch_codec);
      size += target_.CalculateSize(_repeated_target_codec);
      if (options_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Options);
      }
      if (PartialRunHandle.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PartialRunHandle);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RunStepRequest other) {
      if (other == null) {
        return;
      }
      if (other.SessionHandle.Length != 0) {
        SessionHandle = other.SessionHandle;
      }
      feed_.Add(other.feed_);
      fetch_.Add(other.fetch_);
      target_.Add(other.target_);
      if (other.options_ != null) {
        if (options_ == null) {
          options_ = new global::Tensorflow.RunOptions();
        }
        Options.MergeFrom(other.Options);
      }
      if (other.PartialRunHandle.Length != 0) {
        PartialRunHandle = other.PartialRunHandle;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            SessionHandle = input.ReadString();
            break;
          }
          case 18: {
            feed_.AddEntriesFrom(input, _repeated_feed_codec);
            break;
          }
          case 26: {
            fetch_.AddEntriesFrom(input, _repeated_fetch_codec);
            break;
          }
          case 34: {
            target_.AddEntriesFrom(input, _repeated_target_codec);
            break;
          }
          case 42: {
            if (options_ == null) {
              options_ = new global::Tensorflow.RunOptions();
            }
            input.ReadMessage(options_);
            break;
          }
          case 50: {
            PartialRunHandle = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class RunStepResponse : pb::IMessage<RunStepResponse> {
    private static readonly pb::MessageParser<RunStepResponse> _parser = new pb::MessageParser<RunStepResponse>(() => new RunStepResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RunStepResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tensorflow.MasterReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RunStepResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RunStepResponse(RunStepResponse other) : this() {
      tensor_ = other.tensor_.Clone();
      Metadata = other.metadata_ != null ? other.Metadata.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RunStepResponse Clone() {
      return new RunStepResponse(this);
    }

    /// <summary>Field number for the "tensor" field.</summary>
    public const int TensorFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Tensorflow.NamedTensorProto> _repeated_tensor_codec
        = pb::FieldCodec.ForMessage(10, global::Tensorflow.NamedTensorProto.Parser);
    private readonly pbc::RepeatedField<global::Tensorflow.NamedTensorProto> tensor_ = new pbc::RepeatedField<global::Tensorflow.NamedTensorProto>();
    /// <summary>
    /// NOTE: The order of the returned tensors may or may not match
    /// the fetch order specified in RunStepRequest.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Tensorflow.NamedTensorProto> Tensor {
      get { return tensor_; }
    }

    /// <summary>Field number for the "metadata" field.</summary>
    public const int MetadataFieldNumber = 2;
    private global::Tensorflow.RunMetadata metadata_;
    /// <summary>
    /// Returned metadata if requested in the options.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Tensorflow.RunMetadata Metadata {
      get { return metadata_; }
      set {
        metadata_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RunStepResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RunStepResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!tensor_.Equals(other.tensor_)) return false;
      if (!object.Equals(Metadata, other.Metadata)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= tensor_.GetHashCode();
      if (metadata_ != null) hash ^= Metadata.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      tensor_.WriteTo(output, _repeated_tensor_codec);
      if (metadata_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Metadata);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += tensor_.CalculateSize(_repeated_tensor_codec);
      if (metadata_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Metadata);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RunStepResponse other) {
      if (other == null) {
        return;
      }
      tensor_.Add(other.tensor_);
      if (other.metadata_ != null) {
        if (metadata_ == null) {
          metadata_ = new global::Tensorflow.RunMetadata();
        }
        Metadata.MergeFrom(other.Metadata);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            tensor_.AddEntriesFrom(input, _repeated_tensor_codec);
            break;
          }
          case 18: {
            if (metadata_ == null) {
              metadata_ = new global::Tensorflow.RunMetadata();
            }
            input.ReadMessage(metadata_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class PartialRunSetupRequest : pb::IMessage<PartialRunSetupRequest> {
    private static readonly pb::MessageParser<PartialRunSetupRequest> _parser = new pb::MessageParser<PartialRunSetupRequest>(() => new PartialRunSetupRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PartialRunSetupRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tensorflow.MasterReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PartialRunSetupRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PartialRunSetupRequest(PartialRunSetupRequest other) : this() {
      sessionHandle_ = other.sessionHandle_;
      feed_ = other.feed_.Clone();
      fetch_ = other.fetch_.Clone();
      target_ = other.target_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PartialRunSetupRequest Clone() {
      return new PartialRunSetupRequest(this);
    }

    /// <summary>Field number for the "session_handle" field.</summary>
    public const int SessionHandleFieldNumber = 1;
    private string sessionHandle_ = "";
    /// <summary>
    /// REQUIRED: session_handle must be returned by a CreateSession call
    /// to the same master service.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SessionHandle {
      get { return sessionHandle_; }
      set {
        sessionHandle_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "feed" field.</summary>
    public const int FeedFieldNumber = 2;
    private static readonly pb::FieldCodec<string> _repeated_feed_codec
        = pb::FieldCodec.ForString(18);
    private readonly pbc::RepeatedField<string> feed_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// Tensors to be fed in future steps.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Feed {
      get { return feed_; }
    }

    /// <summary>Field number for the "fetch" field.</summary>
    public const int FetchFieldNumber = 3;
    private static readonly pb::FieldCodec<string> _repeated_fetch_codec
        = pb::FieldCodec.ForString(26);
    private readonly pbc::RepeatedField<string> fetch_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// Fetches. A list of tensor names. The caller expects a tensor to be returned
    /// for each fetch[i] (see RunStepResponse.tensor), for corresponding partial
    /// RunStepRequests. The order of specified fetches does not change the
    /// execution order.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Fetch {
      get { return fetch_; }
    }

    /// <summary>Field number for the "target" field.</summary>
    public const int TargetFieldNumber = 4;
    private static readonly pb::FieldCodec<string> _repeated_target_codec
        = pb::FieldCodec.ForString(34);
    private readonly pbc::RepeatedField<string> target_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// Target Nodes. A list of node names. The named nodes will be run in future
    /// steps, but their outputs will not be fetched.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Target {
      get { return target_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PartialRunSetupRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PartialRunSetupRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SessionHandle != other.SessionHandle) return false;
      if(!feed_.Equals(other.feed_)) return false;
      if(!fetch_.Equals(other.fetch_)) return false;
      if(!target_.Equals(other.target_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SessionHandle.Length != 0) hash ^= SessionHandle.GetHashCode();
      hash ^= feed_.GetHashCode();
      hash ^= fetch_.GetHashCode();
      hash ^= target_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SessionHandle.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(SessionHandle);
      }
      feed_.WriteTo(output, _repeated_feed_codec);
      fetch_.WriteTo(output, _repeated_fetch_codec);
      target_.WriteTo(output, _repeated_target_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SessionHandle.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SessionHandle);
      }
      size += feed_.CalculateSize(_repeated_feed_codec);
      size += fetch_.CalculateSize(_repeated_fetch_codec);
      size += target_.CalculateSize(_repeated_target_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PartialRunSetupRequest other) {
      if (other == null) {
        return;
      }
      if (other.SessionHandle.Length != 0) {
        SessionHandle = other.SessionHandle;
      }
      feed_.Add(other.feed_);
      fetch_.Add(other.fetch_);
      target_.Add(other.target_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            SessionHandle = input.ReadString();
            break;
          }
          case 18: {
            feed_.AddEntriesFrom(input, _repeated_feed_codec);
            break;
          }
          case 26: {
            fetch_.AddEntriesFrom(input, _repeated_fetch_codec);
            break;
          }
          case 34: {
            target_.AddEntriesFrom(input, _repeated_target_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class PartialRunSetupResponse : pb::IMessage<PartialRunSetupResponse> {
    private static readonly pb::MessageParser<PartialRunSetupResponse> _parser = new pb::MessageParser<PartialRunSetupResponse>(() => new PartialRunSetupResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PartialRunSetupResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tensorflow.MasterReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PartialRunSetupResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PartialRunSetupResponse(PartialRunSetupResponse other) : this() {
      partialRunHandle_ = other.partialRunHandle_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PartialRunSetupResponse Clone() {
      return new PartialRunSetupResponse(this);
    }

    /// <summary>Field number for the "partial_run_handle" field.</summary>
    public const int PartialRunHandleFieldNumber = 1;
    private string partialRunHandle_ = "";
    /// <summary>
    /// The unique handle corresponding to the ongoing partial run call setup by
    /// the invocation to PartialRunSetup. This handle may be passed to
    /// RunStepRequest to send and receive tensors for this partial run.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PartialRunHandle {
      get { return partialRunHandle_; }
      set {
        partialRunHandle_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PartialRunSetupResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PartialRunSetupResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PartialRunHandle != other.PartialRunHandle) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PartialRunHandle.Length != 0) hash ^= PartialRunHandle.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PartialRunHandle.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(PartialRunHandle);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PartialRunHandle.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PartialRunHandle);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PartialRunSetupResponse other) {
      if (other == null) {
        return;
      }
      if (other.PartialRunHandle.Length != 0) {
        PartialRunHandle = other.PartialRunHandle;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            PartialRunHandle = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CloseSessionRequest : pb::IMessage<CloseSessionRequest> {
    private static readonly pb::MessageParser<CloseSessionRequest> _parser = new pb::MessageParser<CloseSessionRequest>(() => new CloseSessionRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CloseSessionRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tensorflow.MasterReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CloseSessionRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CloseSessionRequest(CloseSessionRequest other) : this() {
      sessionHandle_ = other.sessionHandle_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CloseSessionRequest Clone() {
      return new CloseSessionRequest(this);
    }

    /// <summary>Field number for the "session_handle" field.</summary>
    public const int SessionHandleFieldNumber = 1;
    private string sessionHandle_ = "";
    /// <summary>
    /// REQUIRED: session_handle must be returned by a CreateSession call
    /// to the same master service.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SessionHandle {
      get { return sessionHandle_; }
      set {
        sessionHandle_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CloseSessionRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CloseSessionRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SessionHandle != other.SessionHandle) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SessionHandle.Length != 0) hash ^= SessionHandle.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SessionHandle.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(SessionHandle);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SessionHandle.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SessionHandle);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CloseSessionRequest other) {
      if (other == null) {
        return;
      }
      if (other.SessionHandle.Length != 0) {
        SessionHandle = other.SessionHandle;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            SessionHandle = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CloseSessionResponse : pb::IMessage<CloseSessionResponse> {
    private static readonly pb::MessageParser<CloseSessionResponse> _parser = new pb::MessageParser<CloseSessionResponse>(() => new CloseSessionResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CloseSessionResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tensorflow.MasterReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CloseSessionResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CloseSessionResponse(CloseSessionResponse other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CloseSessionResponse Clone() {
      return new CloseSessionResponse(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CloseSessionResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CloseSessionResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CloseSessionResponse other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  /// <summary>
  /// Reset() allows misbehaving or slow sessions to be aborted and closed, and
  /// causes their resources eventually to be released.  Reset() does not wait
  /// for the computations in old sessions to cease; it merely starts the
  /// process of tearing them down.  However, if a new session is started after
  /// a Reset(), the new session is isolated from changes that old sessions
  /// (started prior to the Reset()) may continue to make to resources, provided
  /// all those resources are in containers listed in "containers".
  ///
  /// Old sessions may continue to have side-effects on resources not in
  /// containers listed in "containers", and thus may affect future
  /// sessions' results in ways that are hard to predict.  Thus, if well-defined
  /// behavior is desired, is it recommended that all containers be listed in
  /// "containers".  Similarly, if a device_filter is specified, results may be
  /// hard to predict.
  /// </summary>
  public sealed partial class ResetRequest : pb::IMessage<ResetRequest> {
    private static readonly pb::MessageParser<ResetRequest> _parser = new pb::MessageParser<ResetRequest>(() => new ResetRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ResetRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tensorflow.MasterReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ResetRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ResetRequest(ResetRequest other) : this() {
      container_ = other.container_.Clone();
      deviceFilters_ = other.deviceFilters_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ResetRequest Clone() {
      return new ResetRequest(this);
    }

    /// <summary>Field number for the "container" field.</summary>
    public const int ContainerFieldNumber = 1;
    private static readonly pb::FieldCodec<string> _repeated_container_codec
        = pb::FieldCodec.ForString(10);
    private readonly pbc::RepeatedField<string> container_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// A list of container names, which may be empty.
    ///
    /// If 'container' is not empty, releases resoures in the given
    /// containers in all devices.
    ///
    /// If 'container' is empty, releases resources in the default
    /// container in all devices.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Container {
      get { return container_; }
    }

    /// <summary>Field number for the "device_filters" field.</summary>
    public const int DeviceFiltersFieldNumber = 2;
    private static readonly pb::FieldCodec<string> _repeated_deviceFilters_codec
        = pb::FieldCodec.ForString(18);
    private readonly pbc::RepeatedField<string> deviceFilters_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// When any filters are present, only devices that match the filters
    /// will be reset. Each filter can be partially specified,
    /// e.g. "/job:ps" "/job:worker/replica:3", etc.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> DeviceFilters {
      get { return deviceFilters_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ResetRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ResetRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!container_.Equals(other.container_)) return false;
      if(!deviceFilters_.Equals(other.deviceFilters_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= container_.GetHashCode();
      hash ^= deviceFilters_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      container_.WriteTo(output, _repeated_container_codec);
      deviceFilters_.WriteTo(output, _repeated_deviceFilters_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += container_.CalculateSize(_repeated_container_codec);
      size += deviceFilters_.CalculateSize(_repeated_deviceFilters_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ResetRequest other) {
      if (other == null) {
        return;
      }
      container_.Add(other.container_);
      deviceFilters_.Add(other.deviceFilters_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            container_.AddEntriesFrom(input, _repeated_container_codec);
            break;
          }
          case 18: {
            deviceFilters_.AddEntriesFrom(input, _repeated_deviceFilters_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class ResetResponse : pb::IMessage<ResetResponse> {
    private static readonly pb::MessageParser<ResetResponse> _parser = new pb::MessageParser<ResetResponse>(() => new ResetResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ResetResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tensorflow.MasterReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ResetResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ResetResponse(ResetResponse other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ResetResponse Clone() {
      return new ResetResponse(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ResetResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ResetResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ResetResponse other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed partial class ListDevicesRequest : pb::IMessage<ListDevicesRequest> {
    private static readonly pb::MessageParser<ListDevicesRequest> _parser = new pb::MessageParser<ListDevicesRequest>(() => new ListDevicesRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ListDevicesRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tensorflow.MasterReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListDevicesRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListDevicesRequest(ListDevicesRequest other) : this() {
      sessionHandle_ = other.sessionHandle_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListDevicesRequest Clone() {
      return new ListDevicesRequest(this);
    }

    /// <summary>Field number for the "session_handle" field.</summary>
    public const int SessionHandleFieldNumber = 1;
    private string sessionHandle_ = "";
    /// <summary>
    /// Optional: session_handle must be returned by a CreateSession call to the
    /// same master service.
    ///
    /// When session_handle is empty, the ClusterSpec provided when the master was
    /// started is used to compute the available devices. If the session_handle is
    /// provided but not recognized, an error is returned. Finally, if a valid
    /// session_handle is provided, the cluster configuration for that session is
    /// used when computing the response.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SessionHandle {
      get { return sessionHandle_; }
      set {
        sessionHandle_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ListDevicesRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ListDevicesRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SessionHandle != other.SessionHandle) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SessionHandle.Length != 0) hash ^= SessionHandle.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SessionHandle.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(SessionHandle);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SessionHandle.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SessionHandle);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ListDevicesRequest other) {
      if (other == null) {
        return;
      }
      if (other.SessionHandle.Length != 0) {
        SessionHandle = other.SessionHandle;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            SessionHandle = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ListDevicesResponse : pb::IMessage<ListDevicesResponse> {
    private static readonly pb::MessageParser<ListDevicesResponse> _parser = new pb::MessageParser<ListDevicesResponse>(() => new ListDevicesResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ListDevicesResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tensorflow.MasterReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListDevicesResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListDevicesResponse(ListDevicesResponse other) : this() {
      localDevice_ = other.localDevice_.Clone();
      remoteDevice_ = other.remoteDevice_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListDevicesResponse Clone() {
      return new ListDevicesResponse(this);
    }

    /// <summary>Field number for the "local_device" field.</summary>
    public const int LocalDeviceFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Tensorflow.DeviceAttributes> _repeated_localDevice_codec
        = pb::FieldCodec.ForMessage(10, global::Tensorflow.DeviceAttributes.Parser);
    private readonly pbc::RepeatedField<global::Tensorflow.DeviceAttributes> localDevice_ = new pbc::RepeatedField<global::Tensorflow.DeviceAttributes>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Tensorflow.DeviceAttributes> LocalDevice {
      get { return localDevice_; }
    }

    /// <summary>Field number for the "remote_device" field.</summary>
    public const int RemoteDeviceFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Tensorflow.DeviceAttributes> _repeated_remoteDevice_codec
        = pb::FieldCodec.ForMessage(18, global::Tensorflow.DeviceAttributes.Parser);
    private readonly pbc::RepeatedField<global::Tensorflow.DeviceAttributes> remoteDevice_ = new pbc::RepeatedField<global::Tensorflow.DeviceAttributes>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Tensorflow.DeviceAttributes> RemoteDevice {
      get { return remoteDevice_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ListDevicesResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ListDevicesResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!localDevice_.Equals(other.localDevice_)) return false;
      if(!remoteDevice_.Equals(other.remoteDevice_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= localDevice_.GetHashCode();
      hash ^= remoteDevice_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      localDevice_.WriteTo(output, _repeated_localDevice_codec);
      remoteDevice_.WriteTo(output, _repeated_remoteDevice_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += localDevice_.CalculateSize(_repeated_localDevice_codec);
      size += remoteDevice_.CalculateSize(_repeated_remoteDevice_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ListDevicesResponse other) {
      if (other == null) {
        return;
      }
      localDevice_.Add(other.localDevice_);
      remoteDevice_.Add(other.remoteDevice_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            localDevice_.AddEntriesFrom(input, _repeated_localDevice_codec);
            break;
          }
          case 18: {
            remoteDevice_.AddEntriesFrom(input, _repeated_remoteDevice_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
